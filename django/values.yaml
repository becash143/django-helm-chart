# Default values for django.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Django Deployment Values
replicaCount: 1
revisionHistoryLimit: 2
image:
  repository: bikashkhalti/sageflick
  pullPolicy: IfNotPresent
  tag: "sage"
  containerPort: 8081

command: >
  python manage.py runserver 0.0.0.0:20001
imagePullSecrets:
  - name: regcred
# Django Deployment Settings
# Init Container to collect static files
collect_static:
  enabled: false
  name: staticfiles
  command: "python3 manage.py collectstatic --noinput"

# Job to run database migrations
db_migrations:
  enabled: false
  name: db-migration
  command: "python3 manage.py migrate --noinput"
  resources: {}
  safeToEvict: true
initContainer:
  script: |
    #!/bin/sh

    # Run migrations
    python manage.py makemigrations --noinput
    python manage.py migrate --noinput

    # Update permissions
    python manage.py load_builtin_roles
    python manage.py update_permissions

    # Run management commands
    python manage.py load_builtin_scopes
    python manage.py loadbase_config

    # Create a superuser
    DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME} \
    DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD} \
    DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL} \
    python manage.py createsuperuser --noinput

    # Collect static files
    python manage.py collectstatic --noinput
    
# Django Static files and Media data folders
# Set to path from working directory
data:
  staticfiles: "app/staticfiles/"
  data_media: "app/data_media/"

probes:
  liveness:
    enabled: true
    path: /healthy
  readiness:
    enabled: true
    path: /ready

nameOverride: ""
fullnameOverride: ""

# Django Service Values
service:
  type: ClusterIP
  port: 20001

# Caddy Settings (Proxy Setup)
proxy:
  repository: caddy
  pullPolicy: IfNotPresent
  tag: "2.1.1-alpine"
  containerPort: 8000

# Env ConfigMap values
envConfigs:
  PROJECT_NAME: "amphitheater"
  DJANGO_SUPERUSER_USERNAME: "admin"
  DJANGO_SUPERUSER_PASSWORD: "admin_admin"
  DJANGO_SUPERUSER_EMAIL: "bikash.bhandari@khalti.com"
  DB_USER: "sage"
  DB_PASSWORD: "amphitheater"
  DB_NAME: "amphitheater"
  DB_PORT: "5430"
  PROJECT_NAME: "192.168.70.46"
  CELERY_BROKER_URL: "redis://192.168.70.46:6379"
  DATABASE_URL: "postgres://sage:amphitheater@192.168.70.46:5430/amphitheater"
  RABBITMQ_URL: "amphitheater:P@ssw0rd1@192.168.70.46:5672/amphitheater"
  AWS_SECRETS_MANAGER_KEY_ID: ""
  AWS_SECRETS_MANAGER_SECRET_KEY: ""
  AWS_SECRETS_MANAGER_REGION_NAME: ""
  STATIC_ROOT: "staticfiles"
  CELERY_BROKER_URL: "redis://192.168.70.46:6379"
  DATABASE_URL: "postgres://sage:amphitheater@192.168.70.46:5430/amphitheater"
  RABBITMQ_URL: "amphitheater:P@ssw0rd1@192.168.70.46:5672/amphitheater"
  AWS_SECRETS_MANAGER_KEY_ID: ""
  AWS_SECRETS_MANAGER_SECRET_KEY: ""
  AWS_SECRETS_MANAGER_REGION_NAME: ""
  DJANGO_SUPERUSER_USERNAME: "admin"
  DJANGO_SUPERUSER_PASSWORD: "admin_admin"
  DJANGO_SUPERUSER_EMAIL: "sabin@gmail.com"

# Env Secret Values (Base64 encoded data)
envSecrets: {}

# Django Ingress Values
ingress:
  enabled: true
  annotations: {}
  hosts:
    - host: example.com
      paths:
        - path: /
          pathType: Prefix
  tls: []

celery:
  # Celery Beat Values
  beat:
    enabled: flase
    componentName: celery-beat
    command: 'celery -A blog.celery beat -l DEBUG'
    replicaCount: 1
    strategy: Recreate
  # Celery Worker Settings
  worker:
    componentName: celery-worker
    command: 'celery -A amphitheater worker --loglevel=info'
    replicaCount: 1
    strategy: RollingUpdate
  # Celery Flower Settings
    ingress:
      enabled: false
      annotations: {}
      hosts:
        - host: example.com
          paths:
            - path: /
              pathType: Prefix
      tls: []

# Disable subchart by setting enabled value to false
redis:
  enabled: true
  password: redis
  master:
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
  replica:
    podSecurityContext:
      enabled: true
      fsGroup: 1001
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
  volumePermissions:
    enabled: true
    runAsUser: 1001

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # Uncomment and adjust the following lines if you need resource limits and requests
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
