apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "django.fullname" . }}
  labels:
    {{- include "django.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  selector:
    matchLabels:
      {{- include "django.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "django.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ include "django.fullname" . }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "django.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.collect_static.enabled }}
        - name: {{ .Values.collect_static.name | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - -c
            - >-
                {{ .Values.collect_static.command }}
          {{- if or .Values.envSecrets .Values.envConfigs }}
          envFrom:
            {{- if .Values.envSecrets }}
            - secretRef:
                name: env-secrets
            {{- end }}
            {{- if .Values.envConfigs }}
            - configMapRef:
                name: env-configmap
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: shared
              mountPath: {{ .Values.data.staticfiles }}
        {{- end }}
        {{- if .Values.db_migrations.enabled }}
        - name: {{ .Values.db_migrations.name | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - "{{ .Values.db_migrations.command }}"
          {{- if or .Values.envSecrets .Values.envConfigs }}
          envFrom:
            {{- if .Values.envSecrets }}
            - secretRef:
                name: env-secrets
            {{- end }}
            {{- if .Values.envConfigs }}
            - configMapRef:
                name: env-configmap
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: shared
              mountPath: {{ .Values.data.staticfiles }}
        {{- end }}
        {{- if .Values.makemigrations.enabled }}
        - name: {{ .Values.makemigrations.name | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - "{{ .Values.makemigrations.command }}"
          {{- if or .Values.envSecrets .Values.envConfigs }}
          envFrom:
            {{- if .Values.envSecrets }}
            - secretRef:
                name: env-secrets
            {{- end }}
            {{- if .Values.envConfigs }}
            - configMapRef:
                name: env-configmap
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: shared
              mountPath: {{ .Values.data.staticfiles }}
        {{- end }}
        {{- if .Values.updatepermissions.enabled }}
        - name: {{ .Values.updatepermissions.name | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - "{{ .Values.updatepermissions.command }}"
          {{- if or .Values.envSecrets .Values.envConfigs }}
          envFrom:
            {{- if .Values.envSecrets }}
            - secretRef:
                name: env-secrets
            {{- end }}
            {{- if .Values.envConfigs }}
            - configMapRef:
                name: env-configmap
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: shared
              mountPath: {{ .Values.data.staticfiles }}
        {{- end }}
        {{- if .Values.superuser.enabled }}
        - name: {{ .Values.superuser.name | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - "{{ .Values.superuser.command }}"
          {{- if or .Values.envSecrets .Values.envConfigs }}
          envFrom:
            {{- if .Values.envSecrets }}
            - secretRef:
                name: env-secrets
            {{- end }}
            {{- if .Values.envConfigs }}
            - configMapRef:
                name: env-configmap
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: shared
              mountPath: {{ .Values.data.staticfiles }}
        {{- end }}
        {{- if .Values.runmanagements.enabled }}
        - name: {{ .Values.runmanagements.name | quote }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - "{{ .Values.runmanagements.command }}"
          {{- if or .Values.envSecrets .Values.envConfigs }}
          envFrom:
            {{- if .Values.envSecrets }}
            - secretRef:
                name: env-secrets
            {{- end }}
            {{- if .Values.envConfigs }}
            - configMapRef:
                name: env-configmap
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: shared
              mountPath: {{ .Values.data.staticfiles }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]
          args:
            - -c
            - >-
                {{ .Values.command }}
          env:
            - name: CELERY_BROKER_URL
              value: "{{ .Values.envConfigs.CELERY_BROKER_URL }}"
            - name: DATABASE_URL
              value: "{{ .Values.envConfigs.DATABASE_URL }}"
            - name: RABBITMQ_URL
              value: "{{ .Values.envConfigs.RABBITMQ_URL }}"
            - name: AWS_SECRETS_MANAGER_KEY_ID
              value: "{{ .Values.envConfigs.AWS_SECRETS_MANAGER_KEY_ID }}"
            - name: AWS_SECRETS_MANAGER_SECRET_KEY
              value: "{{ .Values.envConfigs.AWS_SECRETS_MANAGER_SECRET_KEY }}"
            - name: AWS_SECRETS_MANAGER_REGION_NAME
              value: "{{ .Values.envConfigs.AWS_SECRETS_MANAGER_REGION_NAME }}"
            - name: DJANGO_SUPERUSER_USERNAME
              value: "{{ .Values.envConfigs.DJANGO_SUPERUSER_USERNAME }}"
            - name: DJANGO_SUPERUSER_PASSWORD
              value: "{{ .Values.envConfigs.DJANGO_SUPERUSER_PASSWORD }}"
            - name: DJANGO_SUPERUSER_EMAIL
              value: "{{ .Values.envConfigs.DJANGO_SUPERUSER_EMAIL }}"
          ports:
            - containerPort: {{ .Values.image.containerPort }}
              protocol: TCP
          volumeMounts:
            - name: shared
              mountPath: /srv/{{ .Values.data.staticfiles }}
            - name: shared
              mountPath: /srv/{{ .Values.data.data_media }}
        - name: {{ printf "%s-%s" .Chart.Name "proxy" }}
          image: "{{ .Values.proxy.repository }}:{{ .Values.image.tag }}"
          ports:
            - name: http
              containerPort: {{ .Values.proxy.containerPort }}
              protocol: TCP
          volumeMounts:
            - name: caddy-config
              mountPath: /etc/caddy/Caddyfile
              subPath: Caddyfile
            - name: shared
              mountPath: /srv/{{ .Values.data.staticfiles }}
            - name: shared
              mountPath: /srv/{{ .Values.data.data_media }}
      volumes:
        - name: caddy-config
          configMap:
            name: caddy-config
        - name: shared
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
